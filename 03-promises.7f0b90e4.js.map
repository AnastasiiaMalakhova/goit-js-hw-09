{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,QAC9BC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBA8B3C,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAtCWP,SAASC,cAAc,mBAE/Bc,iBAAiB,SAE3B,SAA4BC,GAC1BA,EAAEC,iBAMF,IAJA,IAAMC,EAASC,OAAOf,EAAYgB,OAC5BC,EAAaF,OAAOjB,EAAWkB,OAC/BE,EAAYH,OAAOhB,EAAUiB,OAE1BG,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EAAG,CAGxDlB,EAAckB,EAFFF,EAAaC,GAAaC,EAAW,IAG9CC,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAInDR,EAAKiC,O","sources":["src/js/03-promisess.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst form = document.querySelector('form');\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\nconst btnSubmit = document.querySelector('.button-promise');\n\nbtnSubmit.addEventListener('click', startCreatePromise);\n\nfunction startCreatePromise(e) {\n  e.preventDefault();\n\n  const amount = Number(amountInput.value);\n  const firstDelay = Number(delayInput.value);\n  const stepDelay = Number(stepInput.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    let delay = firstDelay + stepDelay * (position - 1);\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$0cba6a2020832b46$var$form","document","querySelector","$0cba6a2020832b46$var$delayInput","$0cba6a2020832b46$var$stepInput","$0cba6a2020832b46$var$amountInput","$0cba6a2020832b46$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","amount","Number","value","firstDelay","stepDelay","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.7f0b90e4.js.map"}